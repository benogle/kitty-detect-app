#!/usr/bin/env node

var fs = require('fs');
var path = require("path");
var proc = require('child_process');
var argv = require('yargs')
  .default('arch', process.arch)
  .default('platform', process.platform)
  .argv;

function jsonValue(path, value) { return JSON.parse(fs.readFileSync(path).toString())[value]; };

var modulePath = path.join(".", "node_modules");
var packagerCmd = path.join(modulePath, ".bin", "electron-packager");
var prebuiltPath = path.join(modulePath, "electron-prebuilt");
var prebuiltPackageJSONPath = path.join(prebuiltPath, "package.json");
var buildOutputPath = path.join(".", "release");
var compileCmd = path.join(".", "script", "compile");

var ignorePaths='node_modules/electron-compile/node_modules/electron-compilers|node_modules/\\.bin|node_modules/electron-rebuild|node_modules/electron-jasmine|(/release$)|(/script$)|(/spec$)';

var electronVersion = jsonValue(prebuiltPackageJSONPath, 'version');
var appName = jsonValue('package.json', 'appName');

proc.spawnSync(compileCmd, [], {stdio: 'inherit'});

console.log('Building ', appName);

var args = [
  './',
  appName,
  '--overwrite',
  '--platform', argv.platform,
  '--arch', argv.arch,
  '--version', electronVersion,
  '--ignore', ignorePaths,
  '--out', buildOutputPath
];

var ignoreArgs = ['overwrite', 'platform', 'arch', 'version', 'ignore', 'out', '_', '$0']
for(var arg in argv) {
  if (ignoreArgs.indexOf(arg) > -1) continue;

  if (argv[arg] === true)
    args.push('--' + arg)
  else
    args.push('--' + arg, argv[arg])
}

args = args.concat(argv._);
proc.spawn(packagerCmd, args, {stdio: 'inherit'});
